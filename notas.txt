Body               := Paragraph*

Paragraph          := SentenceAndNewline
                    | SentenceAndEOF
                    
SentenceAndNewline := Sentence+ NEWLINE NEWLINE
SentencesAndEOF    := Sentence+ NEWLINE EOF
                    | Sentence+ EOF
                    
Sentence           := EmphasizedText
                    | BoldText
                    | Text
                    
EmphasizedText     := UNDERSCORE BoldText UNDERSCORE

BoldText           := UNDERSCORE UNDERSCORE TEXT UNDERSCORE UNDERSCORE
                    | STAR STAR TEXT STAR STAR
                    
Text               := TEXT


----------------------------------------PDF SYNTAX---------------------------------------------

PDF Objects ->
A PDF consists of so-called objects that can have varying types, like null, Boolean, integer, real,
name, string, array, dictionary, and stream. These objects can be referenced either directly or 
indirectly in the file. Direct objects are placed inline where they are used, while indirect objects
are referenced and placed somewhere else inside the document.

Direct Object Reference->
Direct objects are constructed inline, directly in the place where they are used.

To set the font as pdf object ->

<< /ProcSet[ /PDF /Text ] /Font <</Font1<</BaseFont/Helvetica/Subtype/TrueType/Type/Font>> >> >>

Indirect Object Reference ->
Indirect objects are referenced and placed somewhere else inside the document. This requires PDF
viewers to look the actual object up.

Indirect objects are defined in the PDF starting with their unique ID, an incrementing positive
number, followed by a generative number, which is usually 0, along with the obj and endobj keywords.

how to define and use a font as an indirect object->
3 0 obj
<</Name/Font1/BaseFont/Helvetica/Subtype/TrueType/Type/Font>>
endobj

4 0 obj
<< /ProcSet[ /PDF /Text ] /Font  <</Font1 3 0 R >> >>
endobj


----------------------------------------------------------------------
PASAR A POSTSCRIPT Y LUEGO A PDF

DF is a complex format. How important is it that your program actually
outputs a PDF? Could you instead output a simpler format for another
program to consume? For example, you could output, say, PostScript and
leave actual PDF generation to ps2pdf.

For example, this prints standard input into a PostScript document:

#include <stdio.h>

int main(void)
{
    fputs("%!PS\n/Courier\n20 selectfont\n72 500 moveto\n(", stdout);
    for (int c = getchar(); c != EOF; c = getchar()) {
        switch (c) {
        case '(':
        case ')': putchar('\\');  // fallthrough
        default:  putchar(c);
        }
    }
    fputs(") show\nshowpage\n", stdout);

Usage to make a PDF:

$ cc -o example example.c
$ echo "Don't (over)complicate it" | ./example | ps2pdf - >output.pdf



conversor.y -------------------------------------------------------

s: documento;

documento:  /*Vacio*/
          | documento parrafo;

parrafo:  NUEVA_LINEA parrafo //Aqui la opcion de escribir pdf no hace nada asi que pongo 0
        | contenido parrafo  //AQUI AÃ‘ADE CONTENIDO
        | ;

contenido:  cabecera
          | texto; //AQUI GENERA PARRAFO (TEXTO)

cabecera: CABECERA ESPACIO texto;  //AQUI GENERA CABECERA

texto:  TEXTO NUEVA_LINEA texto  //AQUI JUNTA $1 Y $3 CREO
      | TEXTO ESPACIO texto; //AQUI JUNTA $1 Y $3 CREO
      | TEXTO
      | ;  